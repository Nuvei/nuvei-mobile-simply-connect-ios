// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target x86_64-apple-ios15.6-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name SimplyConnect
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
import Foundation
import PassKit
@_exported import PayService
@_exported import SimplyConnect
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CheckoutViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public init(transactionDetails: Core.CheckoutTransactionDetails, installment: SimplyConnect.Installment?, i18n: Core.CheckoutI18n?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @objc deinit
}
extension SimplyConnect.CheckoutViewController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension SimplyConnect.CheckoutViewController : PassKit.PKPaymentAuthorizationViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func paymentAuthorizationViewControllerDidFinish(_ controller: PassKit.PKPaymentAuthorizationViewController)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func paymentAuthorizationViewController(_ controller: PassKit.PKPaymentAuthorizationViewController, didAuthorizePayment payment: PassKit.PKPayment, handler completion: @escaping (PassKit.PKPaymentAuthorizationResult) -> Swift.Void)
}
public struct Installment {
  public init(options: [SimplyConnect.InstallmentOption], isNationalIdRequired: Swift.Bool, countryCode: Swift.String)
}
public struct InstallmentOption {
  public init(type: SimplyConnect.InstallmentType, periods: [Swift.Int])
}
extension Core.NuveiSimplyConnect {
  public static func tokenize(input: Core.NVInput, callback: @escaping (Swift.String?, Core.NVFailure?) -> ())
  public static func authenticate3d(uiOwner: any Core.NVUIOwner, input: Core.NVInput, additionalParams: [Swift.String : Any] = [:], forceWebChallenge: Swift.Bool = true, callback: @escaping (Core.NVAuthenticate3dOutput) -> ())
  public static func checkout(uiOwner: any Core.NVUIOwner, authenticate3dInput: Core.NVInput, additionalParams: [Swift.String : Any] = [:], installment: SimplyConnect.Installment?, i18n: Core.CheckoutI18n? = nil, forceWebChallenge: Swift.Bool = true, callback: @escaping (Core.NVCreatePaymentOutput) -> (), declineFallbackDecision: Core.NuveiSimplyConnect.DeclineFallbackDecisionCallback?)
}
public enum InstallmentType : Swift.Int {
  case SINGLE_PAYMENT
  case DEFERRED_WITH_INTEREST
  case DEFERRED_WITHOUT_INTEREST
  case DEFERRED_WITHOUT_INTEREST_AND_GRACE
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension SimplyConnect.InstallmentType : Swift.Equatable {}
extension SimplyConnect.InstallmentType : Swift.Hashable {}
extension SimplyConnect.InstallmentType : Swift.RawRepresentable {}
