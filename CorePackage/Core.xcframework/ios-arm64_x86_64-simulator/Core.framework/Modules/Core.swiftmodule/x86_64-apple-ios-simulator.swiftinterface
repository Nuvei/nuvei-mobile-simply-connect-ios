// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target x86_64-apple-ios15.6-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name Core
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
import AdSupport
import CommonCrypto
import Compression
@_exported import Core
import CoreLocation
import CoreTelephony
import DeveloperToolsSupport
import Foundation
import JOSESwift
import Security
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers public class NVCreatePaymentOutput : Core.NVOutput {
  override public init(result: Core.NVOutput.NVOutputResult, userPaymentOptionId: Swift.String? = nil, ccCardNumber: Swift.String? = nil, bin: Swift.String? = nil, last4Digits: Swift.String? = nil, ccExpMonth: Swift.String? = nil, ccExpYear: Swift.String? = nil, transactionId: Swift.String? = nil, threeDReasonId: Swift.String? = nil, threeDReason: Swift.String? = nil, challengePreferenceReason: Swift.String? = nil, isLiabilityOnIssuer: Swift.Bool? = nil, challengeCancelReasonId: Swift.String? = nil, challengeCancelReason: Swift.String? = nil, errorCode: Swift.Int? = nil, errorDescription: Swift.String? = nil, rawResult: [Swift.String : Any]? = nil)
  @objc deinit
}
public class CheckoutI18n {
  final public let cardHolderNameTitle: Swift.String?
  final public let cardHolderNamePlaceholder: Swift.String?
  final public let cardNumberTitle: Swift.String?
  final public let cardNumberPlaceholder: Swift.String?
  final public let expirationDateTitle: Swift.String?
  final public let expirationDatePlaceholder: Swift.String?
  final public let cvvTitle: Swift.String?
  final public let cvvPlaceholder: Swift.String?
  final public let installmentsProgramTitle: Swift.String?
  final public let singlePaymentText: Swift.String?
  final public let deferredWithInterestText: Swift.String?
  final public let deferredWithoutInterestText: Swift.String?
  final public let deferredWithoutInterestAndGraceText: Swift.String?
  final public let numberOfInstallmentsTitle: Swift.String?
  final public let personalIdTitle: Swift.String?
  final public let personalIdPlaceholder: Swift.String?
  final public let saveDetailsText: Swift.String?
  final public let payButtonTitle: Swift.String?
  final public let errors: [Core.InputError : Swift.String]
  public init(cardHolderNameTitle: Swift.String? = nil, cardHolderNamePlaceholder: Swift.String? = nil, cardNumberTitle: Swift.String? = nil, cardNumberPlaceholder: Swift.String? = nil, expirationDateTitle: Swift.String? = nil, expirationDatePlaceholder: Swift.String? = nil, cvvTitle: Swift.String? = nil, cvvPlaceholder: Swift.String? = nil, installmentsProgramTitle: Swift.String? = nil, singlePaymentText: Swift.String? = nil, deferredWithInterestText: Swift.String? = nil, deferredWithoutInterestText: Swift.String? = nil, deferredWithoutInterestAndGraceText: Swift.String? = nil, numberOfInstallmentsTitle: Swift.String? = nil, personalIdTitle: Swift.String? = nil, personalIdPlaceholder: Swift.String? = nil, saveDetailsText: Swift.String? = nil, payButtonTitle: Swift.String? = nil, errors: [Core.InputError : Swift.String] = [:])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NuveiSimplyConnect {
  public enum Environment {
    case production, integration
    case qa
    public static func == (a: Core.NuveiSimplyConnect.Environment, b: Core.NuveiSimplyConnect.Environment) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let sdkVersion: Swift.String
  public static var environment: Core.NuveiSimplyConnect.Environment?
  public static var checkoutI18n: Core.CheckoutI18n?
  public static var fieldsI18n: Core.FieldsI18n?
  public static var customization: Core.NuveiUICustomization?
  public static var isProcessing: Swift.Bool
  public static func setup(environment: Core.NuveiSimplyConnect.Environment = .production)
  public static func getEnvBaseUrl() -> Swift.String
  public static func createPayment(uiOwner: any Core.NVUIOwner, input: Core.NVInput, additionalParams: [Swift.String : Any] = [:], forceWebChallenge: Swift.Bool = true, callback: @escaping (Core.NVCreatePaymentOutput) -> ())
  public static func internalCreatePayment(uiOwner: any Core.NVUIOwner, input: Core.NVInput, additionalParams: [Swift.String : Any] = [:], forceWebChallenge: Swift.Bool = true, source: Core.SourceApplication, callback: @escaping (Core.NVCreatePaymentOutput) -> ())
  public static func validateInput(forceWebChallenge: Swift.Bool, isCreatePayment: Swift.Bool, callback: @escaping (Core.NVOutput) -> ()) -> Swift.Bool
  @objc deinit
}
public class NuveiToolbarCustomization : Core.NuveiBaseCustomization {
  public var backgroundColor: UIKit.UIColor
  public var headerText: Swift.String
  public init(headerText: Swift.String = "SECURE CHECKOUT", textFont: UIKit.UIFont = UIFont.boldSystemFont(ofSize: 22), textColor: UIKit.UIColor = .white, backgroundColor: UIKit.UIColor = .nuveiDefaultColor)
  @objc deinit
}
public class FieldsI18n {
  final public let cardHolderNameTitle: Swift.String?
  final public let cardHolderNamePlaceholder: Swift.String?
  final public let cardNumberTitle: Swift.String?
  final public let cardNumberPlaceholder: Swift.String?
  final public let expirationDateTitle: Swift.String?
  final public let expirationDatePlaceholder: Swift.String?
  final public let cvvTitle: Swift.String?
  final public let cvvPlaceholder: Swift.String?
  final public let errors: [Core.InputError : Swift.String]
  public init(cardHolderNameTitle: Swift.String? = nil, cardHolderNamePlaceholder: Swift.String? = nil, cardNumberTitle: Swift.String? = nil, cardNumberPlaceholder: Swift.String? = nil, expirationDateTitle: Swift.String? = nil, expirationDatePlaceholder: Swift.String? = nil, cvvTitle: Swift.String? = nil, cvvPlaceholder: Swift.String? = nil, errors: [Core.InputError : Swift.String] = [:])
  @objc deinit
}
public class NuveiFieldCustomization : Core.NuveiUICustomization {
  final public let backgroundColor: UIKit.UIColor
  final public let borderColor: UIKit.UIColor
  final public let cornerRadius: Swift.Int
  final public let borderWidth: Swift.Int
  final public let errorLabelCustomization: Core.NuveiLabelCustomization
  final public let placeholderCustomization: Core.NuveiTextBoxCustomization
  public init(logo: UIKit.UIImage? = nil, toolbarCustomization: Core.NuveiToolbarCustomization = NuveiToolbarCustomization(), labelCustomization: Core.NuveiLabelCustomization = NuveiLabelCustomization(), textBoxCustomization: Core.NuveiTextBoxCustomization = NuveiTextBoxCustomization(), errorLabelCustomization: Core.NuveiLabelCustomization = NuveiLabelCustomization(textColor: .red), placeholderCustomization: Core.NuveiTextBoxCustomization = NuveiTextBoxCustomization(), backgroundColor: UIKit.UIColor = .white, borderColor: UIKit.UIColor = .black, cornerRadius: Swift.Int = 0, borderWidth: Swift.Int = 1)
  @objc deinit
}
public struct Constants {
  public static let error: Swift.String
  public static let supportedMessageVersions: [Swift.String]
}
public func generateECKeyPair(curveType: JOSESwift.ECCurveType) throws -> JOSESwift.ECKeyPair
public func nonReleasePrint(_ items: Any..., separator: Swift.String = " ", terminator: Swift.String = "\n")
public protocol JSONWebEncryptionHeader {
  var alg: Swift.String { get }
  var enc: Swift.String { get }
  var epk: JOSESwift.ECPublicKey? { get }
  var apu: Swift.String? { get }
  var apv: Swift.String? { get }
  subscript(index: Swift.String) -> Any? { get }
  func jsonSerializedData() -> Foundation.Data
  func allParameters() -> [Swift.String : Any]
}
@_hasMissingDesignatedInitializers public class API {
  public static var timeOutInterval: Swift.Double
  public static func request(_ service: Core.Service, callback: @escaping ([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void) throws
  @objc deinit
}
public struct EcdhEsJwe : Core.JSONWebEncryption {
  public let header: any Core.JSONWebEncryptionHeader
  public let encryptedKey: Foundation.Data
  public let initializationVector: Foundation.Data
  public var ciphertext: Foundation.Data
  public var authenticationTag: Foundation.Data
  public var additionalAuthenticatedData: Foundation.Data
  public var compactSerializedString: Swift.String {
    get
  }
  public var compactSerializedData: Foundation.Data {
    get
  }
  public func decrypt(key: any JOSESwift.JWK) throws -> Foundation.Data
  public init(plaintext: Foundation.Data, pubKey: JOSESwift.ECPublicKey, headerDic: [Swift.String : Any] = [:], options: [Swift.String : Any] = [:]) throws
  public init(plaintext: Foundation.Data, pubKey: JOSESwift.ECPublicKey, header: any Core.JSONWebEncryptionHeader, options: [Swift.String : Any] = [:]) throws
  public init(compactSerializedData: Foundation.Data) throws
}
public struct NVUPOCreatePaymentInput : Swift.Encodable {
  public init(sessionToken: Swift.String, merchantSiteId: Swift.String, merchantId: Swift.String, currencyCode: Swift.String?, userTokenId: Swift.String?, clientUniqueId: Swift.String?, userDetails: Core.NVUserDetails?, paymentOption: Core.NVPaymentOption?, sourceApplication: Swift.String, billingAddress: Core.NVBillingAddress? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(*, deprecated, message: "Use `NVInput` instead")
public typealias Authenticate3dInput = Core.NVInput
@available(*, deprecated, message: "Use `NVUserDetails` instead")
public typealias UserDetails = Core.NVUserDetails
@available(*, deprecated, message: "Use `NVMerchantDetails` instead")
public typealias MerchantDetails = Core.NVMerchantDetails
@available(*, deprecated, message: "Use `NVDynamicDescriptor` instead")
public typealias DynamicDescriptor = Core.NVDynamicDescriptor
public struct NVInput : Swift.Encodable, Swift.Decodable {
  public let sessionToken: Swift.String
  public let merchantId: Swift.String
  public let merchantSiteId: Swift.String
  public let applePayMerchantId: Swift.String
  public let applePayMerchantName: Swift.String
  public let currency: Swift.String
  public let amount: Swift.String
  public let paymentOption: Core.NVPaymentOption
  public let userTokenId: Swift.String?
  public let clientUniqueId: Swift.String?
  public let clientRequestId: Swift.String?
  public let customData: Swift.String?
  public let billingAddress: Core.NVBillingAddress?
  public let shippingAddress: Core.NVShippingAddress?
  public let userDetails: Core.NVUserDetails?
  public let merchantDetails: Core.NVMerchantDetails?
  public let countryCode: Swift.String?
  public let dynamicDescriptor: Core.NVDynamicDescriptor?
  public let timeout: Swift.Int
  public let requestTimeout: Swift.Int
  public let addendums: Core.Addendums?
  public init(sessionToken: Swift.String, merchantId: Swift.String, applePayMerchantId: Swift.String, applePayMerchantName: Swift.String, merchantSiteId: Swift.String, currency: Swift.String, amount: Swift.String, paymentOption: Core.NVPaymentOption, userTokenId: Swift.String? = nil, clientUniqueId: Swift.String? = nil, clientRequestId: Swift.String? = nil, customData: Swift.String? = nil, billingAddress: Core.NVBillingAddress? = nil, shippingAddress: Core.NVShippingAddress? = nil, userDetails: Core.NVUserDetails? = nil, merchantDetails: Core.NVMerchantDetails? = nil, countryCode: Swift.String? = nil, dynamicDescriptor: Core.NVDynamicDescriptor? = nil, timeout: Swift.Int = 10, requestTimeout: Swift.Int = 40, addendums: Core.Addendums? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NVUserDetails : Swift.Encodable, Swift.Decodable {
  public let firstName: Swift.String?
  public let lastName: Swift.String?
  public let address: Swift.String?
  public let zip: Swift.String?
  public let state: Swift.String?
  public let email: Swift.String?
  public let phone: Swift.String?
  public let city: Swift.String?
  public let country: Swift.String?
  public let county: Swift.String?
  public init(firstName: Swift.String? = nil, lastName: Swift.String? = nil, address: Swift.String? = nil, zip: Swift.String? = nil, state: Swift.String? = nil, email: Swift.String? = nil, phone: Swift.String? = nil, city: Swift.String? = nil, country: Swift.String? = nil, county: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NVMerchantDetails : Swift.Encodable, Swift.Decodable {
  public let customField1: Swift.String?
  public let customField2: Swift.String?
  public let customField3: Swift.String?
  public let customField4: Swift.String?
  public let customField5: Swift.String?
  public let customField6: Swift.String?
  public let customField7: Swift.String?
  public let customField8: Swift.String?
  public let customField9: Swift.String?
  public let customField10: Swift.String?
  public let customField11: Swift.String?
  public let customField12: Swift.String?
  public let customField13: Swift.String?
  public let customField14: Swift.String?
  public let customField15: Swift.String?
  public init(customField1: Swift.String? = nil, customField2: Swift.String? = nil, customField3: Swift.String? = nil, customField4: Swift.String? = nil, customField5: Swift.String? = nil, customField6: Swift.String? = nil, customField7: Swift.String? = nil, customField8: Swift.String? = nil, customField9: Swift.String? = nil, customField10: Swift.String? = nil, customField11: Swift.String? = nil, customField12: Swift.String? = nil, customField13: Swift.String? = nil, customField14: Swift.String? = nil, customField15: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NVDynamicDescriptor : Swift.Encodable, Swift.Decodable {
  public let merchantName: Swift.String?
  public let merchantPhone: Swift.String?
  public init(merchantName: Swift.String? = nil, merchantPhone: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum InputError : Swift.Int, Swift.Codable {
  case numberEmpty
  case creditCardInvalid
  case expiryEmpty
  case expiryInvalid
  case cvvEmpty
  case cvvInvalid
  case holderNameEmpty
  case holderNameInvalid
  case nationalIDEmpty
  case nationalIDInvalid
  case empty
  case creditCardBlocked
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class NVBillingAddress : Swift.Encodable, Swift.Decodable {
  final public let firstName: Swift.String?
  final public let lastName: Swift.String?
  final public let country: Swift.String?
  final public let state: Swift.String?
  final public let county: Swift.String?
  final public let city: Swift.String?
  final public let address: Swift.String?
  final public let addressLine2: Swift.String?
  final public let addressLine3: Swift.String?
  final public let zip: Swift.String?
  final public let addressMatch: Swift.String?
  final public let email: Swift.String?
  final public let phone: Swift.String?
  final public let cell: Swift.String?
  final public let homePhone: Swift.String?
  final public let workPhone: Swift.String?
  public init(firstName: Swift.String? = nil, lastName: Swift.String? = nil, country: Swift.String? = nil, state: Swift.String? = nil, county: Swift.String? = nil, city: Swift.String? = nil, address: Swift.String? = nil, addressLine2: Swift.String? = nil, addressLine3: Swift.String? = nil, zip: Swift.String? = nil, addressMatch: Swift.String? = nil, email: Swift.String? = nil, phone: Swift.String? = nil, cell: Swift.String? = nil, homePhone: Swift.String? = nil, workPhone: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class NVShippingAddress : Swift.Encodable, Swift.Decodable {
  final public let firstName: Swift.String?
  final public let lastName: Swift.String?
  final public let country: Swift.String?
  final public let state: Swift.String?
  final public let county: Swift.String?
  final public let city: Swift.String?
  final public let address: Swift.String?
  final public let addressLine2: Swift.String?
  final public let addressLine3: Swift.String?
  final public let zip: Swift.String?
  final public let addressMatch: Swift.String?
  final public let email: Swift.String?
  final public let phone: Swift.String?
  final public let cell: Swift.String?
  public init(firstName: Swift.String? = nil, lastName: Swift.String? = nil, country: Swift.String? = nil, state: Swift.String? = nil, county: Swift.String? = nil, city: Swift.String? = nil, address: Swift.String? = nil, addressLine2: Swift.String? = nil, addressLine3: Swift.String? = nil, zip: Swift.String? = nil, addressMatch: Swift.String? = nil, email: Swift.String? = nil, phone: Swift.String? = nil, cell: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public struct Addendums : Swift.Codable {
  public init(nationalId: Swift.String?, installmentType: Swift.Int?, numberOfInstallments: Swift.Int?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class MobileSDKInternal {
  public static let shared: Core.MobileSDKInternal
  public static var logOutput: Swift.String
  public static func updateLogOutput(add addition: Swift.String)
  public var clientPaymentOutput: [Swift.String : Any]?
  public var customization: Core.NuveiUICustomization!
  public var isCreatePayment: Swift.Bool
  public var forceWebChallenge: Swift.Bool
  public var transaction: Core.Transaction?
  public func createUPOPayment(input: Core.NVUPOCreatePaymentInput, callback: @escaping (Core.NVOutput?) -> ())
  public func getPaymentStatus(sessionToken: Swift.String, callback: @escaping (Core.NVOutput?) -> ())
  public func createPayment(viewController: UIKit.UIViewController, input: Core.NVInput, customization: Core.NuveiUICustomization, additionalParams: [Swift.String : Any], forceWebChallenge: Swift.Bool, callback: @escaping (Core.NVCreatePaymentOutput) -> ())
  public func privateAuthenticate3d(viewController: UIKit.UIViewController, authenticate3dInput: Core.NVInput, additionalParams: [Swift.String : Any], ignoreFailure: Swift.Bool = false, callback: @escaping (Core.NVOutput) -> ())
  public func initPayment(input: [Swift.String : Any], ignoreFailure: Swift.Bool = false, callback: @escaping ([Swift.String : Any]?, Core.NVFailure?) -> ())
  public func closeTransaction()
  @objc deinit
}
public class NuveiTextBoxCustomization : Core.NuveiBaseCustomization {
  public var backgroundColor: UIKit.UIColor
  public var borderColor: UIKit.UIColor
  public init(backgroundColor: UIKit.UIColor = .white, textFont: UIKit.UIFont = UIFont.systemFont(ofSize: 14), textColor: UIKit.UIColor = .black, borderColor: UIKit.UIColor = .black, cornerRadius: Swift.Int = 0, borderWidth: Swift.Int = 1)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class JWEHelper : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public enum NuveiButtonType {
  case submit
  case `continue`
  case next
  case cancel
  case resend
  case close
  public var string: Swift.String {
    get
  }
  public static func == (a: Core.NuveiButtonType, b: Core.NuveiButtonType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class NuveiButtonCustomization : Core.NuveiBaseCustomization {
  public var backgroundColor: UIKit.UIColor
  public init(textFont: UIKit.UIFont = UIFont.systemFont(ofSize: 17), textColor: UIKit.UIColor = .black, backgroundColor: UIKit.UIColor = .white, cornerRadius: Swift.Int = 0)
  @objc deinit
}
public struct NVError {
  public struct Code {
    public static let unknown: Swift.Int
    public static let isProcessing: Swift.Int
    public static let invalidInput: Swift.Int
    public static let `internal`: Swift.Int
    public static let userCancelled: Swift.Int
    public static let protocolError: Swift.Int
    public static let timedOut: Swift.Int
    public static let missingTransactionId: Swift.Int
    public static let missingThreeD: Swift.Int
    public static let notSetup: Swift.Int
    public static let general3dError: Swift.Int
  }
  public struct Description {
    public static let unknown: Swift.String
    public static let isProcessing: Swift.String
    public static let invalidInput: Swift.String
    public static let `internal`: Swift.String
    public static let userCancelled: Swift.String
    public static let protocolError: Swift.String
    public static let timedOut: Swift.String
    public static let missingTransactionId: Swift.String
    public static let missingThreeD: Swift.String
    public static let notSetup: Swift.String
    public static let forceWebChallenge: Swift.String
    public static let general3dError: Swift.String
  }
}
@_hasMissingDesignatedInitializers public class CompletionEvent {
  @objc deinit
}
extension Swift.Encodable {
  public var dictionary: [Swift.String : Any]? {
    get
  }
}
extension UIKit.UIImage {
  public static func sdkImage(_ name: Swift.String?) -> UIKit.UIImage?
}
extension Swift.Dictionary where Key == Swift.String, Value == Any {
  public func addingCommonParams() -> [Swift.String : Any]
  public func adding(_ value: Any?, for key: Swift.String) -> [Swift.String : Any]
  public func transactionResultValue() -> Core.NVOutput.NVOutputInternalResult
  public func resultAndErrorValues(checkSuccess: Swift.Bool = false) -> (result: Core.NVOutput.NVOutputInternalResult, errorCode: Swift.Int?, errorDescription: Swift.String?)
  public func asGenericOutput() -> Core.NVOutput?
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func fillParent(insets: UIKit.UIEdgeInsets = .zero)
  @_Concurrency.MainActor @preconcurrency public func fillParentHorizontally(leftMargin: CoreFoundation.CGFloat = 0, rightMargin: CoreFoundation.CGFloat = 0)
}
extension UIKit.UIColor {
  public static func sdkColor(_ name: Swift.String) -> UIKit.UIColor?
  public static var nuveiDefaultColor: UIKit.UIColor
}
public enum CoreResources {
  public static var bundle: Foundation.Bundle {
    get
  }
}
extension Swift.Dictionary {
  public func parseResponse<T>() -> T? where T : Swift.Decodable
  public static func keyPathKeys(forKeyPath: Swift.String) -> [Key]?
}
public protocol JSONWebEncryption {
  var header: any Core.JSONWebEncryptionHeader { get }
  var encryptedKey: Foundation.Data { get }
  var initializationVector: Foundation.Data { get }
  var ciphertext: Foundation.Data { get }
  var authenticationTag: Foundation.Data { get }
  var compactSerializedString: Swift.String { get }
  var compactSerializedData: Foundation.Data { get }
  var additionalAuthenticatedData: Foundation.Data { get }
  func decrypt(key: any JOSESwift.JWK) throws -> Foundation.Data
}
public protocol Mapper {
  associatedtype Source
  associatedtype Destination
  func map(_ source: Self.Source) -> Self.Destination
}
@available(*, deprecated, message: "Use `NVPaymentOption` instead")
public typealias PaymentOption = Core.NVPaymentOption
@available(*, deprecated, message: "Use `NVCardDetails` instead")
public typealias CardDetails = Core.NVCardDetails
public struct NVPaymentOption : Swift.Encodable, Swift.Decodable {
  public let userPaymentOptionId: Swift.String?
  public let paymentMethod: Swift.String?
  public let card: Core.NVCardDetails?
  public let savePm: Swift.Bool?
  public let alternativePaymentMethod: Core.NVPaymentOption.AlternativePaymentMethod?
  public init(paymentMethod: Swift.String? = nil, userPaymentOptionId: Swift.String? = nil, card: Core.NVCardDetails? = nil, saveMethod: Swift.Bool? = nil, alternativePaymentMethod: Core.NVPaymentOption.AlternativePaymentMethod? = nil) throws
  public struct AlternativePaymentMethod : Swift.Encodable, Swift.Decodable {
    public let paymentMethod: Swift.String?
    public let fields: [Swift.String : Swift.String]?
    public init(paymentMethod: Swift.String?, fields: [Swift.String : Swift.String]?)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NVCardDetails : Swift.Encodable, Swift.Decodable {
  public let cardNumber: Swift.String?
  public let cardHolderName: Swift.String?
  public let CVV: Swift.String?
  public let expirationMonth: Swift.String?
  public let expirationYear: Swift.String?
  public let externalToken: Core.NVCardDetails.ExternalToken?
  public let ccTempToken: Swift.String?
  public init(cvv: Swift.String? = nil)
  public init(cardNumber: Swift.String? = nil, cardHolderName: Swift.String? = nil, cvv: Swift.String? = nil, expirationMonth: Swift.String?, expirationYear: Swift.String?, externalToken: Core.NVCardDetails.ExternalToken? = nil, ccTempToken: Swift.String? = nil)
  public struct ExternalToken : Swift.Encodable, Swift.Decodable {
    public let externalTokenProvider: Swift.String
    public let mobileToken: Swift.String
    public init(externalTokenProvider: Swift.String, mobileToken: Swift.String)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NVFailure : Swift.Error {
  case unknown, invalidInput([Core.InputError]), notSetup, `internal`(Swift.Int, Swift.String, [Swift.String : Any]?)
  public static func defaultInternal(rawResult: [Swift.String : Any]? = nil) -> Core.NVFailure
  public var code: Swift.Int {
    get
  }
  public var description: Swift.String {
    get
  }
  public var raw: [Swift.String : Any]? {
    get
  }
  public var transactionId: Swift.String? {
    get
  }
}
@available(*, deprecated, message: "Use `NVAuthenticate3dOutput` instead")
public typealias Authenticate3dOutput = Core.NVAuthenticate3dOutput
public class NVAuthenticate3dOutput : Core.NVOutput {
  final public let cavv: Swift.String?
  final public let eci: Swift.String?
  final public let xid: Swift.String?
  final public let dsTransID: Swift.String?
  final public let ccTempToken: Swift.String?
  public init(result: Core.NVOutput.NVOutputResult, userPaymentOptionId: Swift.String? = nil, cavv: Swift.String? = nil, eci: Swift.String? = nil, xid: Swift.String? = nil, dsTransID: Swift.String? = nil, ccCardNumber: Swift.String? = nil, bin: Swift.String? = nil, last4Digits: Swift.String? = nil, ccExpMonth: Swift.String? = nil, ccExpYear: Swift.String? = nil, ccTempToken: Swift.String? = nil, transactionId: Swift.String? = nil, threeDReasonId: Swift.String? = nil, threeDReason: Swift.String? = nil, challengePreferenceReason: Swift.String? = nil, isLiabilityOnIssuer: Swift.Bool? = nil, challengeCancelReasonId: Swift.String? = nil, challengeCancelReason: Swift.String? = nil, errorCode: Swift.Int? = nil, errorDescription: Swift.String? = nil, rawResult: [Swift.String : Any]? = nil)
  @objc deinit
}
public protocol NVUIOwner {
  func getNVUIOwnerViewController() -> UIKit.UIViewController
}
extension UIKit.UIViewController : Core.NVUIOwner {
  @_Concurrency.MainActor @preconcurrency public func getNVUIOwnerViewController() -> UIKit.UIViewController
}
@available(iOS 13.0, *)
extension UIKit.UIApplication : Core.NVUIOwner {
  @_Concurrency.MainActor @preconcurrency public func getNVUIOwnerViewController() -> UIKit.UIViewController
}
@_hasMissingDesignatedInitializers public class ConfigParameters {
  public static let DIRECTORY_SERVER_GROUP: Swift.String
  public static let DIRECTORY_SERVER_ID: Swift.String
  public static let DIRECTORY_SERVER_KEY: Swift.String
  public static let DIRECTORY_SERVER_ALG_KEY: Swift.String
  public static let DIRECTORY_SERVER_ALG_RSA: Swift.String
  public static let DIRECTORY_SERVER_ALG_EC: Swift.String
  public static let DIRECTORY_SERVER_ROOT_CA_KEY: Swift.String
  public static let DIRECTORY_SERVER_ROOT_CA_ALG_KEY: Swift.String
  @objc deinit
}
open class NuveiUICustomization {
  public init(logo: UIKit.UIImage? = nil, toolbarCustomization: Core.NuveiToolbarCustomization = NuveiToolbarCustomization(), labelCustomization: Core.NuveiLabelCustomization = NuveiLabelCustomization(), textBoxCustomization: Core.NuveiTextBoxCustomization = NuveiTextBoxCustomization())
  public func setButtonCustomization(_ buttonCustomization: Core.NuveiButtonCustomization, for buttonType: Core.NuveiButtonType)
  public func buttonCustomization(for buttonType: Core.NuveiButtonType) -> Core.NuveiButtonCustomization
  public static var defaultCheckoutToolbarColor: UIKit.UIColor? {
    get
  }
  public static var defaultCheckoutToolbarLogo: UIKit.UIImage? {
    get
  }
  public func getLogo() -> UIKit.UIImage?
  public func getToolbarCustomization() -> Core.NuveiToolbarCustomization
  public func getLabelCustomization() -> Core.NuveiLabelCustomization
  public func getTextBoxCustomization() -> Core.NuveiTextBoxCustomization
  @objc deinit
}
public class NuveiLabelCustomization : Core.NuveiBaseCustomization {
  public init(textFont: UIKit.UIFont = UIFont.systemFont(ofSize: 14), textColor: UIKit.UIColor = .black, headingTextFont: UIKit.UIFont = UIFont.systemFont(ofSize: 14), headingTextColor: UIKit.UIColor = .white)
  @objc deinit
}
public enum ECDHEESError : Swift.Error {
  case unknownOrUnsupportedAlgorithm(reason: Swift.String)
  case unknownOrUnsupportedCompressionAlgorithm(reason: Swift.String)
  case invalidJWK(reason: Swift.String)
  case invalidKeyDerivationSize
  case invalidKeySize
  case invalidEncryptionIVSize
  case invalidHeaderParameter(reason: Swift.String)
  case invalidJsonData
  case invalidBase64URLEncoded
  case invalidCompactSerializedData
  case deriveKeyFail(reason: Swift.String)
  case wrapKeyFail
  case unwrapKeyFail
  case compressionFailed
  case decompressionFailed
  case decryptFail(reason: Swift.String)
}
public class NuveiBaseCustomization {
  public var textFont: UIKit.UIFont
  public var textColor: UIKit.UIColor
  public init(textFont: UIKit.UIFont, textColor: UIKit.UIColor)
  @objc deinit
}
public struct CheckoutTransactionDetails : Swift.Codable {
  public init(sessionToken: Swift.String, merchantId: Swift.String, applePayMerchantId: Swift.String, applePayMerchantName: Swift.String, merchantSiteId: Swift.String, currency: Swift.String, amount: Swift.String, userTokenId: Swift.String?, clientUniqueId: Swift.String?, clientRequestId: Swift.String?, customData: Swift.String?, billingAddress: Core.NVBillingAddress?, shippingAddress: Core.NVShippingAddress?, userDetails: Core.NVUserDetails?, merchantDetails: Core.NVMerchantDetails?, dynamicDescriptor: Core.NVDynamicDescriptor?, paymentOption: Core.NVPaymentOption?, countryCode: Swift.String?, forceWebChallenge: Swift.Bool)
  public static func transactionDetails(from object: Core.NVInput, additionalParams: [Swift.String : Any]?, forceWebChallenge: Swift.Bool) -> Core.CheckoutTransactionDetails
  public func getSessionToken() -> Swift.String
  public func getMerchantId() -> Swift.String
  public func getApplePayMerchantId() -> Swift.String
  public func getApplePayMerchantName() -> Swift.String
  public func getMerchantSiteId() -> Swift.String
  public func getCurrency() -> Swift.String
  public func getAmount() -> Swift.String
  public func getUserTokenId() -> Swift.String?
  public func getClientUniqueId() -> Swift.String?
  public func getClientRequestId() -> Swift.String?
  public func getCustomData() -> Swift.String?
  public func getBillingAddress() -> Core.NVBillingAddress?
  public func getShippingAddress() -> Core.NVShippingAddress?
  public func getUserDetails() -> Core.NVUserDetails?
  public func getMerchantDetails() -> Core.NVMerchantDetails?
  public func getDynamicDescriptor() -> Core.NVDynamicDescriptor?
  public func getPaymentOption() -> Core.NVPaymentOption?
  public func getCountryCode() -> Swift.String?
  public func getForceWebChallenge() -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NetworkConstants {
  public static let sessionToken: Swift.String
  public static let merchantId: Swift.String
  public static let merchantSiteId: Swift.String
  public static let currency: Swift.String
  public static let amount: Swift.String
  public static let paymentOption: Swift.String
  public static let userTokenId: Swift.String
  public static let clientUniqueId: Swift.String
  public static let clientRequestId: Swift.String
  public static let customData: Swift.String
  public static let billingAddress: Swift.String
  public static let shippingAddress: Swift.String
  public static let notificationURL: Swift.String
  public static let userDetails: Swift.String
  public static let merchantDetails: Swift.String
  public static let dynamicDescriptor: Swift.String
  public static let firstName: Swift.String
  public static let lastName: Swift.String
  public static let country: Swift.String
  public static let state: Swift.String
  public static let county: Swift.String
  public static let city: Swift.String
  public static let address: Swift.String
  public static let transID: Swift.String
  public static let encData: Swift.String
  public static let ephemPubKey: Swift.String
  public static let referenceNumber: Swift.String
  public static let appID: Swift.String
  public static let maxTimeout: Swift.String
  public static let appSdkInterface: Swift.String
  public static let appSdkUIType: Swift.String
  public static let challengeWindowSize: Swift.String
  public static let messageVersion: Swift.String
  public static let addressLine2: Swift.String
  public static let addressLine3: Swift.String
  public static let zip: Swift.String
  public static let addressMatch: Swift.String
  public static let email: Swift.String
  public static let phone: Swift.String
  public static let cell: Swift.String
  public static let homePhone: Swift.String
  public static let workPhone: Swift.String
  public static let shippingCounty: Swift.String
  public static let shipAddressLine2: Swift.String
  public static let shipAddressLine3: Swift.String
  public static let merchantName: Swift.String
  public static let merchantPhone: Swift.String
  public static let customField1: Swift.String
  public static let customField2: Swift.String
  public static let customField3: Swift.String
  public static let customField4: Swift.String
  public static let customField5: Swift.String
  public static let customField6: Swift.String
  public static let customField7: Swift.String
  public static let customField8: Swift.String
  public static let customField9: Swift.String
  public static let customField10: Swift.String
  public static let customField11: Swift.String
  public static let customField12: Swift.String
  public static let customField13: Swift.String
  public static let customField14: Swift.String
  public static let customField15: Swift.String
  public static let userPaymentOptionId: Swift.String
  public static let card: Swift.String
  public static let cardNumber: Swift.String
  public static let cardHolderName: Swift.String
  public static let directoryServerId: Swift.String
  public static let directoryServerPublicKey: Swift.String
  public static let cvv: Swift.String
  public static let expirationMonth: Swift.String
  public static let expirationYear: Swift.String
  public static let ccCardNumber: Swift.String
  public static let bin: Swift.String
  public static let ccExpMonth: Swift.String
  public static let ccExpYear: Swift.String
  public static let last4Digits: Swift.String
  public static let threeD: Swift.String
  public static let acsUrl: Swift.String
  public static let paRequest: Swift.String
  public static let paRes: Swift.String
  public static let cReq: Swift.String
  public static let v2supported: Swift.String
  public static let xid: Swift.String
  public static let eci: Swift.String
  public static let cavv: Swift.String
  public static let sdk: Swift.String
  public static let dsTransID: Swift.String
  public static let acsTransID: Swift.String
  public static let acsSignedContent: Swift.String
  public static let result: Swift.String
  public static let transactionId: Swift.String
  public static let relatedTransactionId: Swift.String
  public static let deviceDetails: Swift.String
  public static let browserDetails: Swift.String
  public static let platformType: Swift.String
  public static let platformTypeValue: Swift.String
  public static let methodCompletionInd: Swift.String
  public static let methodCompletionIndValue: Swift.String
  public static let transactionStatus: Swift.String
  public static let status: Swift.String
  public static let errorDescription: Swift.String
  public static let gwExtendedErrorCode: Swift.String
  public static let gwErrorCode: Swift.String
  public static let paymentMethodErrorCode: Swift.String
  public static let gwErrorReason: Swift.String
  public static let paymentMethodErrorReason: Swift.String
  public static let reason: Swift.String
  public static let webMasterId: Swift.String
  public static let webMasterIdValuePrefix: Swift.String
  public static let errCode: Swift.String
  public static let ccTempToken: Swift.String
  public static let threeDReasonId: Swift.String
  public static let threeDReason: Swift.String
  public static let isLiabilityOnIssuer: Swift.String
  public static let challengePreferenceReason: Swift.String
  public static let transactionType: Swift.String
  public static let redirectUrl: Swift.String
  public static let enabled: Swift.String
  public static let XXX: Swift.String
  public enum Checkout {
    public enum Methods {
      public static let creditCard: Swift.String
      public static let paypal: Swift.String
      public static let googlePay: Swift.String
      public static let applePay: Swift.String
      public static let bankTransfer: Swift.String
      public static let ideal: Swift.String
      public static let sofort: Swift.String
    }
    public enum Fields {
      public enum Types {
        public static let text: Swift.String
      }
      public enum Names {
        public static let applePayToken: Swift.String
        public static let idealPayer: Swift.String
        public static let idealEmail: Swift.String
      }
    }
    public enum Codes {
      public static let paymentStillInProgress: Swift.Int
    }
  }
}
@_hasMissingDesignatedInitializers public class NVUtils {
  public static let shared: Core.NVUtils
  public func simCountryCode() -> Swift.String?
  public func setup(additionalParams: [Swift.String : Any]? = nil)
  public func getLocale() -> Swift.String
  @objc deinit
}
public protocol JWEEncryptor {
  func encrypt(plaintext: Foundation.Data, key: any JOSESwift.JWK, header: any Core.JSONWebEncryptionHeader, options: [Swift.String : Any]) throws -> (header: any Core.JSONWebEncryptionHeader, encryptedKey: Foundation.Data, iv: Foundation.Data, ciphertext: Foundation.Data, tag: Foundation.Data)
  func decrypt(key: any JOSESwift.JWK, header: any Core.JSONWebEncryptionHeader, encryptedKey: Foundation.Data, iv: Foundation.Data, ciphertext: Foundation.Data, tag: Foundation.Data, aad: Foundation.Data) throws -> Foundation.Data
}
public var kBaseURL: Swift.String {
  get
}
public var kBaseTermURL: Swift.String {
  get
}
public enum Service {
  case initPayment(body: [Swift.String : Any])
  case clientAuthorize3d(body: [Swift.String : Any])
  case clientPayment(body: [Swift.String : Any])
  case verify3d(body: [Swift.String : Any])
  case getUPOs(body: [Swift.String : Any])
  case getAPMs(body: [Swift.String : Any])
  case paymentStatus(body: [Swift.String : Any])
  case deleteUPO(body: [Swift.String : Any])
  case tokenizeCard(body: [Swift.String : Any])
  case getCardDetails(body: [Swift.String : Any])
  public static func setSourceApplication(_ sourceApplication: Core.SourceApplication)
}
public enum SourceApplication {
  case direct
  case fields
  case checkout
  public var serverValue: Swift.String {
    get
  }
  public static func == (a: Core.SourceApplication, b: Core.SourceApplication) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct DeviceDetails {
  public static func collectDeviceDetails() -> Core.DeviceDetails
  public func asRequestParameters() -> [Swift.String : Any]
}
public struct EcdhEsJweHeader : Core.JSONWebEncryptionHeader {
  public init(alg: Swift.String, enc: Swift.String)
  public init(parameters: [Swift.String : Any]) throws
  public init(jsonData: Foundation.Data) throws
  public init(b64uData: Foundation.Data) throws
  public init(cloneFrom: any Core.JSONWebEncryptionHeader) throws
  public func jsonSerializedData() -> Foundation.Data
  public func allParameters() -> [Swift.String : Any]
}
extension Core.EcdhEsJweHeader {
  public var alg: Swift.String {
    get
    set
  }
  public var enc: Swift.String {
    get
    set
  }
  public var epk: JOSESwift.ECPublicKey? {
    get
    set
  }
  public var apu: Swift.String? {
    get
    set
  }
  public var apv: Swift.String? {
    get
    set
  }
}
extension Core.EcdhEsJweHeader {
  public subscript(index: Swift.String) -> Any? {
    get
    set
  }
}
public class Authenticate3dToInitPaymentMapper : Core.Mapper {
  public init()
  public func map(_ source: Core.NVInput) -> [Swift.String : Any]
  public typealias Destination = [Swift.String : Any]
  public typealias Source = Core.NVInput
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Transaction {
  @objc deinit
}
extension JOSESwift.ECCurveType {
  public var bitLength: Swift.Int {
    get
  }
}
extension JOSESwift.ECPrivateKey {
  public func getPrivate() -> JOSESwift.ECPrivateKey
}
extension JOSESwift.JWK {
  public func dictionarized() -> [Swift.String : Swift.String]
  public init(dictionary: [Swift.String : Any]) throws
}
extension JOSESwift.ECPrivateKey {
  public func getPublic() -> JOSESwift.ECPublicKey
  public func isCorrespondWith(_ key: JOSESwift.ECPublicKey) -> Swift.Bool
}
public class NVOutput {
  public enum NVOutputResult : Swift.String {
    case approved, declined, cancelled, error
    public static func from(_ internalResult: Core.NVOutput.NVOutputInternalResult?) -> Core.NVOutput.NVOutputResult
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum NVOutputInternalResult : Swift.String {
    case approved, declined, redirect, cancelled, error
    public static func from(_ raw: Swift.String?, checkSuccess: Swift.Bool = false) -> Core.NVOutput.NVOutputInternalResult
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  final public let result: Core.NVOutput.NVOutputResult
  final public let userPaymentOptionId: Swift.String?
  final public let ccCardNumber: Swift.String?
  final public let bin: Swift.String?
  final public let last4Digits: Swift.String?
  final public let ccExpMonth: Swift.String?
  final public let ccExpYear: Swift.String?
  final public let transactionId: Swift.String?
  final public let threeDReason: Swift.String?
  final public let threeDReasonId: Swift.String?
  final public let challengeCancelReasonId: Swift.String?
  final public let challengeCancelReason: Swift.String?
  final public let isLiabilityOnIssuer: Swift.Bool?
  final public let challengePreferenceReason: Swift.String?
  final public let errorCode: Swift.Int?
  final public let errorDescription: Swift.String?
  final public let rawResult: [Swift.String : Any]?
  public init(result: Core.NVOutput.NVOutputResult, userPaymentOptionId: Swift.String? = nil, ccCardNumber: Swift.String? = nil, bin: Swift.String? = nil, last4Digits: Swift.String? = nil, ccExpMonth: Swift.String? = nil, ccExpYear: Swift.String? = nil, transactionId: Swift.String? = nil, threeDReasonId: Swift.String? = nil, threeDReason: Swift.String? = nil, challengePreferenceReason: Swift.String? = nil, isLiabilityOnIssuer: Swift.Bool? = nil, challengeCancelReasonId: Swift.String? = nil, challengeCancelReason: Swift.String? = nil, errorCode: Swift.Int? = nil, errorDescription: Swift.String? = nil, rawResult: [Swift.String : Any]? = nil)
  public static func create(isCreatePayment: Swift.Bool, result: Core.NVOutput.NVOutputResult, userPaymentOptionId: Swift.String? = nil, ccCardNumber: Swift.String? = nil, bin: Swift.String? = nil, last4Digits: Swift.String? = nil, ccExpMonth: Swift.String? = nil, ccExpYear: Swift.String? = nil, transactionId: Swift.String? = nil, threeDReasonId: Swift.String? = nil, threeDReason: Swift.String? = nil, challengePreferenceReason: Swift.String? = nil, isLiabilityOnIssuer: Swift.Bool? = nil, challengeCancelReasonId: Swift.String? = nil, challengeCancelReason: Swift.String? = nil, errorCode: Swift.Int? = nil, errorDescription: Swift.String? = nil, rawResult: [Swift.String : Any]? = nil) -> Core.NVOutput
  public static func create(from failure: Core.NVFailure?, isCreatePayment: Swift.Bool) -> Core.NVOutput
  @objc deinit
}
extension Core.NuveiSimplyConnect.Environment : Swift.Equatable {}
extension Core.NuveiSimplyConnect.Environment : Swift.Hashable {}
extension Core.InputError : Swift.Equatable {}
extension Core.InputError : Swift.Hashable {}
extension Core.InputError : Swift.RawRepresentable {}
extension Core.NuveiButtonType : Swift.Equatable {}
extension Core.NuveiButtonType : Swift.Hashable {}
extension Core.SourceApplication : Swift.Equatable {}
extension Core.SourceApplication : Swift.Hashable {}
extension Core.NVOutput.NVOutputResult : Swift.Equatable {}
extension Core.NVOutput.NVOutputResult : Swift.Hashable {}
extension Core.NVOutput.NVOutputResult : Swift.RawRepresentable {}
extension Core.NVOutput.NVOutputInternalResult : Swift.Equatable {}
extension Core.NVOutput.NVOutputInternalResult : Swift.Hashable {}
extension Core.NVOutput.NVOutputInternalResult : Swift.RawRepresentable {}
